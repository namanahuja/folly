load("@fbcode_macros//build_defs:cpp_library.bzl", "cpp_library")

oncall("fbcode_entropy_wardens_folly")

cpp_library(
    name = "accumulate",
    headers = [
        "Accumulate.h",
        "Accumulate-inl.h",
    ],
    exported_deps = [
        ":async_generator",
        ":coroutine",
        ":task",
    ],
)

cpp_library(
    name = "async_generator",
    srcs = [],
    headers = ["AsyncGenerator.h"],
    exported_deps = [
        ":auto_cleanup_fwd",
        ":coroutine",
        ":current_executor",
        ":detail_malloc",
        ":detail_manual_lifetime",
        ":invoke",
        ":result",
        ":scope_exit",
        ":via_if_async",
        ":with_async_stack",
        ":with_cancellation",
        "folly//folly:cancellation_token",
        "folly//folly:exception_wrapper",
        "folly//folly:traits",
        "folly//folly:try",
        "folly//folly/tracing:async_stack",
    ],
    exported_external_deps = [
        "glog",
    ],
)

cpp_library(
    name = "async_pipe",
    srcs = [],
    headers = ["AsyncPipe.h"],
    exported_deps = [
        ":async_generator",
        ":coroutine",
        ":invoke",
        ":small_unbounded_queue",
        ":via_if_async",
        "folly//folly:try",
        "folly//folly/fibers:semaphore",
    ],
)

cpp_library(
    name = "async_scope",
    srcs = [],
    headers = ["AsyncScope.h"],
    exported_deps = [
        ":coroutine",
        ":current_executor",
        ":detail_barrier",
        ":detail_barrier_task",
        ":task",
        "folly//folly:cancellation_token",
        "folly//folly:exception_wrapper",
        "folly//folly/futures:core",
        "folly//folly/portability:source_location",
    ],
    exported_external_deps = [
        "glog",
    ],
)

cpp_library(
    name = "async_stack",
    headers = ["AsyncStack.h"],
    exported_deps = [
        ":coroutine",
        ":with_async_stack",
        "folly//folly:executor",
        "folly//folly/tracing:async_stack",
    ],
)

cpp_library(
    name = "baton",
    srcs = ["Baton.cpp"],
    headers = ["Baton.h"],
    deps = [
        "folly//folly/synchronization:atomic_util",
    ],
    exported_deps = [
        ":coroutine",
    ],
)

cpp_library(
    name = "blocking_wait",
    headers = ["BlockingWait.h"],
    exported_deps = [
        ":coroutine",
        ":detail_malloc",
        ":detail_traits",
        ":task",
        ":traits",
        ":via_if_async",
        ":with_async_stack",
        "folly//folly:try",
        "folly//folly/executors:manual_executor",
        "folly//folly/fibers:core",
        "folly//folly/synchronization:baton",
        "folly//folly/tracing:async_stack",
    ],
)

cpp_library(
    name = "collect",
    headers = [
        "Collect.h",
        "Collect-inl.h",
    ],
    exported_deps = [
        ":async_generator",
        ":async_pipe",
        ":async_scope",
        ":coroutine",
        ":detail_barrier",
        ":detail_barrier_task",
        ":detail_current_async_frame",
        ":detail_helpers",
        ":detail_traits",
        ":mutex",
        ":task",
        ":via_if_async",
        "folly//folly:cancellation_token",
        "folly//folly:exception_wrapper",
        "folly//folly:try",
        "folly//folly:unit",
        "folly//folly/container:access",
        "folly//folly/container:iterator",
    ],
)

cpp_library(
    name = "concat",
    headers = [
        "Concat.h",
        "Concat-inl.h",
    ],
    exported_deps = [
        ":async_generator",
        ":coroutine",
    ],
)

cpp_library(
    name = "coroutine",
    headers = ["Coroutine.h"],
    exported_deps = [
        "folly//folly:portability",
        "folly//folly:utility",
    ],
)

cpp_library(
    name = "current_executor",
    headers = ["CurrentExecutor.h"],
    exported_deps = [
        ":coroutine",
        ":via_if_async",
        ":with_async_stack",
        "folly//folly:executor",
        "folly//folly/io/async:request_context",
    ],
)

cpp_library(
    name = "detach_on_cancel",
    headers = ["DetachOnCancel.h"],
    exported_deps = [
        ":baton",
        ":coroutine",
        ":detail_helpers",
        ":invoke",
        ":task",
        ":traits",
    ],
)

cpp_library(
    name = "detail_barrier",
    headers = ["detail/Barrier.h"],
    exported_deps = [
        ":coroutine",
        ":traits",
        ":with_async_stack",
        "folly//folly/tracing:async_stack",
    ],
)

cpp_library(
    name = "detail_barrier_task",
    headers = ["detail/BarrierTask.h"],
    exported_deps = [
        ":coroutine",
        ":detail_barrier",
        ":detail_malloc",
        ":with_async_stack",
    ],
)

cpp_library(
    name = "detail_current_async_frame",
    headers = ["detail/CurrentAsyncFrame.h"],
    exported_deps = [
        ":coroutine",
        ":with_async_stack",
        "folly//folly:executor",
        "folly//folly/tracing:async_stack",
    ],
)

cpp_library(
    name = "detail_helpers",
    headers = ["detail/Helpers.h"],
    exported_deps = [
        ":coroutine",
        "folly//folly:executor",
        "folly//folly:singleton_thread_local",
        "folly//folly/io/async:request_context",
        "folly//folly/tracing:async_stack",
    ],
)

cpp_library(
    name = "detail_malloc",
    srcs = ["detail/Malloc.cpp"],
    headers = ["detail/Malloc.h"],
    deps = [
        "folly//folly/lang:hint",
        "folly//folly/lang:new",
    ],
    exported_deps = [
        "folly//folly:c_portability",
    ],
)

cpp_library(
    name = "detail_manual_lifetime",
    headers = ["detail/ManualLifetime.h"],
    exported_deps = [
        "folly//folly:scope_guard",
    ],
)

cpp_library(
    name = "detail_traits",
    headers = ["detail/Traits.h"],
    exported_deps = [
        "folly//folly:traits",
    ],
)

cpp_library(
    name = "filter",
    headers = [
        "Filter.h",
        "Filter-inl.h",
    ],
    exported_deps = [
        ":async_generator",
        ":coroutine",
    ],
)

cpp_library(
    name = "future_util",
    headers = ["FutureUtil.h"],
    exported_deps = [
        ":coroutine",
        ":invoke",
        ":task",
        ":traits",
        "folly//folly/futures:core",
    ],
)

cpp_library(
    name = "generator",
    headers = ["Generator.h"],
    exported_deps = [
        ":coroutine",
        ":invoke",
    ],
)

cpp_library(
    name = "gmock_helpers",
    headers = ["GmockHelpers.h"],
    exported_deps = [
        ":coroutine",
        ":gtest_helpers",
        ":result",
        ":task",
        "folly//folly/portability:gmock",
    ],
)

cpp_library(
    name = "gtest_helpers",
    headers = ["GtestHelpers.h"],
    exported_deps = [
        ":blocking_wait",
        ":coroutine",
        ":task",
        "folly//folly/experimental/exception_tracer:smart_exception_stack_trace_hooks",  # @manual
        "folly//folly/experimental/exception_tracer:smart_exception_tracer",
        "folly//folly/portability:gtest",
    ],
)

cpp_library(
    name = "inline_task",
    headers = ["detail/InlineTask.h"],
    exported_deps = [
        ":coroutine",
        ":detail_malloc",
        ":with_async_stack",
        "folly//folly:scope_guard",
        "folly//folly:try",
        "folly//folly/lang:assume",
        "folly//folly/tracing:async_stack",
    ],
)

cpp_library(
    name = "invoke",
    headers = ["Invoke.h"],
    exported_deps = [
        "folly//folly/functional:invoke",
        "folly//folly/lang:customization_point",
    ],
)

cpp_library(
    name = "merge",
    headers = [
        "Merge.h",
        "Merge-inl.h",
    ],
    exported_deps = [
        ":async_generator",
        ":baton",
        ":coroutine",
        ":detail_barrier",
        ":detail_barrier_task",
        ":detail_current_async_frame",
        ":detail_helpers",
        ":mutex",
        ":task",
        ":via_if_async",
        ":with_cancellation",
        "folly//folly:cancellation_token",
        "folly//folly:executor",
        "folly//folly:scope_guard",
    ],
)

cpp_library(
    name = "mutex",
    srcs = ["Mutex.cpp"],
    headers = ["Mutex.h"],
    exported_deps = [
        ":coroutine",
        ":via_if_async",
        "folly//folly:executor",
    ],
)

cpp_library(
    name = "promise",
    headers = ["Promise.h"],
    exported_deps = [
        ":baton",
        ":coroutine",
        "folly//folly:cancellation_token",
        "folly//folly:try",
        "folly//folly/futures:core",
        "folly//folly/synchronization:relaxed_atomic",
    ],
)

cpp_library(
    name = "result",
    headers = ["Result.h"],
    exported_deps = [
        "folly//folly:cancellation_token",
        "folly//folly:exception_wrapper",
        "folly//folly:try",
    ],
)

cpp_library(
    name = "retry",
    headers = ["Retry.h"],
    exported_deps = [
        ":coroutine",
        ":result",
        ":sleep",
        ":task",
        ":traits",
        "folly//folly:cancellation_token",
        "folly//folly:constexpr_math",
        "folly//folly:exception_wrapper",
        "folly//folly:random",
        "folly//folly:try",
    ],
)

cpp_library(
    name = "rust_adaptors",
    headers = ["RustAdaptors.h"],
    exported_deps = [
        ":async_generator",
        ":task",
        "folly//folly:cancellation_token",
        "folly//folly:executor",
        "folly//folly:optional",
        "folly//folly/futures:core",
        "folly//folly/synchronization:baton",
    ],
)

cpp_library(
    name = "scope_exit",
    headers = ["ScopeExit.h"],
    exported_deps = [
        ":coroutine",
        ":traits",
        ":via_if_async",
        "folly//folly:exception_wrapper",
        "folly//folly:executor",
        "folly//folly:scope_guard",
        "folly//folly/functional:invoke",
        "folly//folly/lang:assume",
        "folly//folly/lang:customization_point",
        "folly//folly/tracing:async_stack",
    ],
)

cpp_library(
    name = "shared_lock",
    headers = ["SharedLock.h"],
    exported_deps = [
        ":coroutine",
        "folly//folly:portability",
    ],
    exported_external_deps = ["glog"],
)

cpp_library(
    name = "shared_mutex",
    srcs = ["SharedMutex.cpp"],
    headers = ["SharedMutex.h"],
    exported_deps = [
        ":coroutine",
        ":shared_lock",
        ":via_if_async",
        "folly//folly:executor",
        "folly//folly:spin_lock",
        "folly//folly:synchronized",
    ],
)

cpp_library(
    name = "sleep",
    headers = [
        "Sleep.h",
        "Sleep-inl.h",
    ],
    exported_deps = [
        ":baton",
        ":coroutine",
        ":current_executor",
        ":task",
        "folly//folly:cancellation_token",
        "folly//folly/futures:core",
    ],
)

cpp_library(
    name = "small_unbounded_queue",
    srcs = [],
    headers = ["SmallUnboundedQueue.h"],
    exported_deps = [
        ":baton",
        ":coroutine",
        ":mutex",
        ":task",
        "folly//folly/experimental/channels/detail:atomic_queue",
    ],
)

cpp_library(
    name = "task",
    headers = ["Task.h"],
    exported_deps = [
        ":coroutine",
        ":current_executor",
        ":detail_malloc",
        ":detail_traits",
        ":inline_task",
        ":invoke",
        ":result",
        ":scope_exit",
        ":traits",
        ":via_if_async",
        ":with_async_stack",
        ":with_cancellation",
        "folly//folly:cancellation_token",
        "folly//folly:executor",
        "folly//folly:glog",
        "folly//folly:portability",
        "folly//folly:scope_guard",
        "folly//folly:traits",
        "folly//folly:try",
        "folly//folly/futures:core",
        "folly//folly/io/async:request_context",
        "folly//folly/lang:assume",
        "folly//folly/tracing:async_stack",
    ],
    exported_external_deps = [
        "glog",
    ],
)

cpp_library(
    name = "timed_wait",
    headers = ["TimedWait.h"],
    exported_deps = [
        ":baton",
        ":coroutine",
        ":detail_helpers",
        ":invoke",
        ":task",
        ":traits",
        "folly//folly:optional",
        "folly//folly/futures:core",
    ],
)

cpp_library(
    name = "timeout",
    headers = [
        "Timeout.h",
        "Timeout-inl.h",
    ],
    exported_deps = [
        ":baton",
        ":coroutine",
        ":task",
        ":traits",
        ":with_cancellation",
        "folly//folly:cancellation_token",
        "folly//folly/futures:core",
    ],
)

cpp_library(
    name = "traits",
    headers = ["Traits.h"],
    exported_deps = [
        ":coroutine",
        "folly//folly:traits",
    ],
    exported_external_deps = [],
)

cpp_library(
    name = "transform",
    headers = [
        "Transform.h",
        "Transform-inl.h",
    ],
    exported_deps = [
        ":async_generator",
        ":coroutine",
        "folly//folly:traits",
    ],
)

cpp_library(
    name = "unbounded_queue",
    srcs = [],
    headers = ["UnboundedQueue.h"],
    exported_deps = [
        ":coroutine",
        ":task",
        "folly//folly/concurrency:unbounded_queue",
        "folly//folly/fibers:semaphore",
    ],
)

cpp_library(
    name = "via_if_async",
    headers = ["ViaIfAsync.h"],
    exported_deps = [
        ":coroutine",
        ":detail_malloc",
        ":traits",
        ":with_async_stack",
        ":with_cancellation",
        "folly//folly:executor",
        "folly//folly:traits",
        "folly//folly/io/async:request_context",
        "folly//folly/lang:customization_point",
        "folly//folly/tracing:async_stack",
    ],
    exported_external_deps = [
        "glog",
    ],
)

cpp_library(
    name = "with_async_stack",
    headers = ["WithAsyncStack.h"],
    exported_deps = [
        ":coroutine",
        ":traits",
        "folly//folly/functional:invoke",
        "folly//folly/lang:assume",
        "folly//folly/lang:customization_point",
        "folly//folly/tracing:async_stack",
    ],
)

cpp_library(
    name = "with_cancellation",
    headers = ["WithCancellation.h"],
    exported_deps = [
        ":coroutine",
        "folly//folly:cancellation_token",
        "folly//folly/lang:customization_point",
    ],
)

cpp_library(
    name = "bounded_queue",
    srcs = [],
    headers = ["BoundedQueue.h"],
    exported_deps = [
        ":task",
        "folly//folly:mpmc_queue",
        "folly//folly:producer_consumer_queue",
        "folly//folly/fibers:semaphore",
    ],
)

cpp_library(
    name = "shared_promise",
    headers = [
        "SharedPromise.h",
    ],
    exported_deps = [
        ":promise",
        "folly//folly:small_vector",
        "folly//folly:synchronized",
        "folly//folly:utility",
        "folly//folly/futures:core",
    ],
)

cpp_library(
    name = "cleanup",
    headers = [
        "Cleanup.h",
    ],
    exported_deps = [
        "folly//folly/functional:invoke",
    ],
)

cpp_library(
    name = "auto_cleanup_fwd",
    headers = [
        "AutoCleanup-fwd.h",
    ],
    exported_deps = [
        ":cleanup",
        ":coroutine",
    ],
)

cpp_library(
    name = "auto_cleanup",
    headers = [
        "AutoCleanup.h",
    ],
    exported_deps = [
        ":auto_cleanup_fwd",
        ":collect",
        ":task",
    ],
)
