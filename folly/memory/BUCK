load("@fbcode_macros//build_defs:cpp_library.bzl", "cpp_library")
load("@fbcode_macros//build_defs:cpp_unittest.bzl", "cpp_unittest")

oncall("fbcode_entropy_wardens_folly")

cpp_library(
    name = "arena",
    headers = [
        "Arena.h",
        "Arena-inl.h",
    ],
    exported_deps = [
        ":malloc",
        "folly//folly:conv",
        "folly//folly:likely",
        "folly//folly:memory",
        "folly//folly/lang:align",
        "folly//folly/lang:checked_math",
        "folly//folly/lang:exception",
        "folly//folly/lang:safe_assert",
    ],
    exported_external_deps = [
        "boost",
    ],
)

cpp_library(
    name = "mallctl_helper",
    srcs = ["MallctlHelper.cpp"],
    headers = ["MallctlHelper.h"],
    deps = [
        "folly//folly:format",
        "folly//folly:string",
    ],
    exported_deps = [
        ":malloc",
    ],
)

cpp_library(
    name = "malloc",
    headers = ["Malloc.h"],
    os_deps = [(
        "linux",
        ["third-party//jemalloc:headers"],
    )],
    exported_deps = [
        "folly//folly:portability",
        "folly//folly/lang:bits",
        "folly//folly/lang:exception",
        "folly//folly/memory/detail:malloc_impl",
        "folly//folly/portability:malloc",
    ],
)

cpp_library(
    name = "memory_resource",
    headers = ["MemoryResource.h"],
)

cpp_library(
    name = "not_null",
    srcs = [],
    headers = [
        "not_null.h",
        "not_null-inl.h",
    ],
    exported_deps = [
        "folly//folly:memory",
        "folly//folly:portability",
        "folly//folly/lang:exception",
    ],
)

cpp_library(
    name = "reentrant_allocator",
    srcs = ["ReentrantAllocator.cpp"],
    headers = ["ReentrantAllocator.h"],
    deps = [
        "folly//folly/lang:bits",
        "folly//folly/lang:safe_assert",
        "folly//folly/portability:sys_mman",
    ],
    exported_deps = [
        "folly//folly:portability",
    ],
)

cpp_library(
    name = "sanitize_address",
    srcs = ["SanitizeAddress.cpp"],
    headers = ["SanitizeAddress.h"],
    deps = [
        "folly//folly/lang:extern",
    ],
    exported_deps = [
        "folly//folly:portability",
    ],
)

cpp_library(
    name = "sanitize_leak",
    srcs = ["SanitizeLeak.cpp"],
    headers = ["SanitizeLeak.h"],
    deps = [
        "folly//folly/lang:extern",
    ],
    exported_deps = [
        "folly//folly:portability",
    ],
)

cpp_library(
    name = "thread_cached_arena",
    srcs = ["ThreadCachedArena.cpp"],
    headers = ["ThreadCachedArena.h"],
    exported_deps = [
        "folly//folly:likely",
        "folly//folly:synchronized",
        "folly//folly:thread_local",
        "folly//folly/memory:arena",
    ],
)

cpp_library(
    name = "uninitialized_memory_hacks",
    headers = ["UninitializedMemoryHacks.h"],
)

cpp_library(
    name = "jemalloc_nodump_allocator",
    srcs = ["JemallocNodumpAllocator.cpp"],
    headers = ["JemallocNodumpAllocator.h"],
    deps = [
        "folly//folly:conv",
        "folly//folly:string",
        "folly//folly/memory:malloc",
    ],
    exported_deps = [
        "folly//folly:c_portability",
        "folly//folly/portability:config",
        "folly//folly/portability:malloc",
        "folly//folly/portability:sys_mman",
    ],
    external_deps = [
        "glog",
    ],
)

cpp_library(
    name = "jemalloc_huge_page_allocator",
    srcs = ["JemallocHugePageAllocator.cpp"],
    headers = ["JemallocHugePageAllocator.h"],
    deps = [
        "folly//folly:c_portability",
        "folly//folly/memory:malloc",
        "folly//folly/portability:malloc",
        "folly//folly/portability:string",
        "folly//folly/portability:sys_mman",
        "folly//folly/portability:sys_types",
    ],
    external_deps = [
        "glog",
    ],
)

cpp_unittest(
    name = "jemalloc_huge_page_allocator_test",
    srcs = ["JemallocHugePageAllocatorTest.cpp"],
    headers = [],
    allocator = "jemalloc",
    deps = [
        "folly//folly/container:f14_hash",
        "folly//folly/memory:jemalloc_huge_page_allocator",
        "folly//folly/memory:malloc",
        "folly//folly/portability:gtest",
    ],
)

cpp_unittest(
    name = "jemalloc_nodump_allocator_test",
    srcs = ["JemallocNodumpAllocatorTest.cpp"],
    headers = [],
    allocator = "jemalloc",
    deps = [
        "folly//folly/io:iobuf",
        "folly//folly/memory:jemalloc_nodump_allocator",
        "folly//folly/memory:malloc",
        "folly//folly/portability:gtest",
    ],
)
