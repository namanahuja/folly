load("@fbcode_macros//build_defs:auto_headers.bzl", "AutoHeaders")
load("@fbcode_macros//build_defs:cpp_library.bzl", "cpp_library")

oncall("fbcode_entropy_wardens_folly")

cpp_library(
    name = "add_tasks",
    headers = [
        "AddTasks.h",
        "AddTasks-inl.h",
    ],
    exported_deps = [
        ":core",
        "folly//folly:optional",
        "folly//folly:try",
    ],
)

cpp_library(
    name = "atomic_batch_dispatcher",
    headers = [
        "AtomicBatchDispatcher.h",
        "AtomicBatchDispatcher-inl.h",
    ],
    exported_deps = [
        "folly//folly:c_portability",
        "folly//folly:function",
        "folly//folly:optional",
        "folly//folly/fibers/detail:atomic_batch_dispatcher",
        "folly//folly/futures:core",
    ],
)

cpp_library(
    name = "batch_dispatcher",
    headers = ["BatchDispatcher.h"],
    exported_deps = [
        "folly//folly:function",
        "folly//folly/futures:core",
    ],
)

cpp_library(
    name = "boost_context_compatibility",
    headers = ["BoostContextCompatibility.h"],
    exported_deps = [
        "folly//folly:function",
    ],
    exported_external_deps = [
        "glog",
        ("boost", None, "boost_context"),
    ],
)

cpp_library(
    name = "core",
    srcs = [
        "Baton.cpp",
        "Fiber.cpp",
        "FiberManager.cpp",
    ],
    auto_headers = AutoHeaders.NONE,
    headers = [
        "Baton.h",
        "Baton-inl.h",
        "Fiber.h",
        "Fiber-inl.h",
        "FiberManagerInternal.h",
        "FiberManagerInternal-inl.h",
        "Promise.h",
        "Promise-inl.h",
    ],
    deps = [
        "folly//folly:constexpr_math",
        "folly//folly:singleton_thread_local",
        "folly//folly/detail:memory_idler",
        "folly//folly/memory:sanitize_address",
        "folly//folly/portability:asm",
        "folly//folly/portability:config",
        "folly//folly/portability:sys_syscall",
        "folly//folly/portability:unistd",
        "folly//folly/synchronization:sanitize_thread",
    ],
    exported_deps = [
        ":boost_context_compatibility",
        ":guard_page_allocator",
        ":loop_controller",
        ":traits",
        "folly//folly:atomic_linked_list",
        "folly//folly:c_portability",
        "folly//folly:executor",
        "folly//folly:function",
        "folly//folly:intrusive_list",
        "folly//folly:likely",
        "folly//folly:memory",
        "folly//folly:optional",
        "folly//folly:portability",
        "folly//folly:scope_guard",
        "folly//folly:try",
        "folly//folly/detail:async_trace",
        "folly//folly/detail:futex",
        "folly//folly/experimental:execution_observer",
        "folly//folly/experimental/coro:coroutine",
        "folly//folly/functional:invoke",
        "folly//folly/io/async:async_base",
        "folly//folly/io/async:request_context",
        "folly//folly/lang:thunk",
        "folly//folly/portability:pthread",
        "folly//folly/tracing:async_stack",
    ],
    external_deps = [
        "glog",
    ],
)

cpp_library(
    name = "core_manager",
    headers = [
        "FiberManager.h",
        "FiberManager-inl.h",
    ],
    exported_deps = [
        ":core",
        "folly//folly/functional:invoke",
        "folly//folly/futures:core",
    ],
)

cpp_library(
    name = "event_base_loop_controller",
    headers = [
        "EventBaseLoopController.h",
        "EventBaseLoopController-inl.h",
    ],
    exported_deps = [
        ":core",
        ":executor_based_loop_controller",
        "folly//folly:cancellation_token",
        "folly//folly:memory",
        "folly//folly/io/async:async_base",
    ],
)

cpp_library(
    name = "executor_loop_controller",
    headers = [
        "ExecutorLoopController.h",
        "ExecutorLoopController-inl.h",
    ],
    exported_deps = [
        ":core",
        ":executor_based_loop_controller",
        "folly//folly:executor",
        "folly//folly:scope_guard",
        "folly//folly/futures:core",
    ],
)

cpp_library(
    name = "fiber_manager_map",
    headers = [
        "FiberManagerMap.h",
        "FiberManagerMap-inl.h",
    ],
    exported_deps = [
        ":core",
        ":event_base_loop_controller",
        "folly//folly:function",
        "folly//folly:scope_guard",
        "folly//folly:singleton_thread_local",
        "folly//folly:synchronized",
        "folly//folly/container:f14_hash",
        "folly//folly/io/async:async_base",
        "folly//folly/synchronization:relaxed_atomic",
    ],
)

cpp_library(
    name = "fibers",
    exported_deps = [
        ":add_tasks",  # @manual
        ":atomic_batch_dispatcher",  # @manual
        ":batch_dispatcher",  # @manual
        ":batch_semaphore",  # @manual
        ":boost_context_compatibility",  # @manual
        ":core",  # @manual
        ":core_manager",  # @manual
        ":event_base_loop_controller",  # @manual
        ":fiber_manager_map",  # @manual
        ":for_each",  # @manual
        ":generic_baton",  # @manual
        ":guard_page_allocator",  # @manual
        ":loop_controller",  # @manual
        ":semaphore",  # @manual
        ":semaphore_base",  # @manual
        ":simple_loop_controller",  # @manual
        ":timed_mutex",  # @manual
        ":traits",  # @manual
        ":when_n",  # @manual
    ],
)

cpp_library(
    name = "for_each",
    headers = [
        "ForEach.h",
        "ForEach-inl.h",
    ],
    exported_deps = [
        ":core",
        "folly//folly/functional:invoke",
    ],
)

cpp_library(
    name = "generic_baton",
    headers = ["GenericBaton.h"],
    exported_deps = [
        ":core",
        "folly//folly/synchronization:baton",
    ],
)

cpp_library(
    name = "guard_page_allocator",
    srcs = ["GuardPageAllocator.cpp"],
    headers = ["GuardPageAllocator.h"],
    deps = [
        "folly//folly:singleton",
        "folly//folly:spin_lock",
        "folly//folly:synchronized",
        "folly//folly/portability:sys_mman",
        "folly//folly/portability:unistd",
    ],
    external_deps = [
        "glog",
        ("glibc", None, "dl"),
    ],
)

cpp_library(
    name = "loop_controller",
    headers = ["LoopController.h"],
    exported_deps = [
        "folly//folly/io/async:async_base_fwd",
    ],
)

cpp_library(
    name = "executor_based_loop_controller",
    headers = ["ExecutorBasedLoopController.h"],
    exported_deps = [
        ":loop_controller",
        "folly//folly:executor",
    ],
)

cpp_library(
    name = "semaphore",
    srcs = ["Semaphore.cpp"],
    headers = ["Semaphore.h"],
    exported_deps = [
        ":core",
        "folly//folly:intrusive_list",
        "folly//folly:synchronized",
        "folly//folly/experimental/coro:task",
        "folly//folly/futures:core",
    ],
)

cpp_library(
    name = "batch_semaphore",
    srcs = ["BatchSemaphore.cpp"],
    headers = ["BatchSemaphore.h"],
    exported_deps = [
        ":semaphore_base",
    ],
)

cpp_library(
    name = "semaphore_base",
    srcs = ["SemaphoreBase.cpp"],
    headers = ["SemaphoreBase.h"],
    exported_deps = [
        ":core",
        "folly//folly:intrusive_list",
        "folly//folly:synchronized",
        "folly//folly/experimental/coro:task",
        "folly//folly/futures:core",
    ],
)

cpp_library(
    name = "simple_loop_controller",
    srcs = ["SimpleLoopController.cpp"],
    headers = ["SimpleLoopController.h"],
    deps = [
        "folly//folly/io/async:async_base",
    ],
    exported_deps = [
        ":core_manager",
        ":loop_controller",
        "folly//folly:function",
        "folly//folly:likely",
    ],
)

cpp_library(
    name = "timed_mutex",
    headers = [
        "CallOnce.h",
        "TimedMutex.h",
        "TimedMutex-inl.h",
    ],
    exported_deps = [
        ":generic_baton",
        "folly//folly:intrusive_list",
        "folly//folly:portability",
        "folly//folly:spin_lock",
        "folly//folly/synchronization:call_once",
    ],
)

cpp_library(
    name = "traits",
    headers = ["traits.h"],
)

cpp_library(
    name = "when_n",
    headers = [
        "WhenN.h",
        "WhenN-inl.h",
    ],
    exported_deps = [
        ":core",
        ":for_each",
        "folly//folly:optional",
        "folly//folly/functional:invoke",
    ],
)
