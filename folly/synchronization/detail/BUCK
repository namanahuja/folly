load("@fbcode_macros//build_defs:cpp_library.bzl", "cpp_library")

oncall("fbcode_entropy_wardens_folly")

cpp_library(
    name = "atomic_utils",
    headers = ["AtomicUtils.h"],
    exported_deps = [
        "folly//folly/lang:assume",
    ],
)

cpp_library(
    name = "hazptr_utils",
    headers = [
        "HazptrUtils.h",
    ],
    exported_deps = [
        ":sleeper",
        "folly//folly:portability",
    ],
    exported_external_deps = [
        "glog",
    ],
)

cpp_library(
    name = "rcu-detail",
    headers = [
        "ThreadCachedLists.h",
        "ThreadCachedReaders.h",
        "ThreadCachedTag.h",
    ],
    exported_deps = [
        "folly//folly:function",
        "folly//folly:synchronized",
        "folly//folly:thread_local",
        "folly//folly/synchronization:asymmetric_thread_fence",
        "folly//folly/synchronization:relaxed_atomic",
    ],
    exported_external_deps = [
        "glog",
    ],
)

cpp_library(
    name = "sleeper",
    srcs = ["Sleeper.cpp"],
    headers = ["Sleeper.h"],
    deps = [
        "folly//folly:portability",
    ],
    exported_deps = [
        "folly//folly/portability:asm",
    ],
)

cpp_library(
    name = "spin",
    headers = ["Spin.h"],
    exported_deps = [
        "folly//folly/portability:asm",
        "folly//folly/synchronization:wait_options",
    ],
)

cpp_library(
    name = "inline_function_ref",
    headers = [
        "InlineFunctionRef.h",
    ],
    exported_deps = [
        "folly//folly:function",
        "folly//folly:traits",
        "folly//folly:utility",
        "folly//folly/functional:invoke",
    ],
)

cpp_library(
    name = "hardware",
    srcs = [
        # Use source-specific flags so that these flags aren't applied to this
        # rules headers when they're compiled as a module, as they don't contain
        # any code that requires RTM and they'd conflict when imported by
        # dependents that don't also set it.
        (
            "Hardware.cpp",
            ["-mrtm"],
        ),
    ],
    headers = ["Hardware.h"],
    deps = [
        "folly//folly:cpp_attributes",
        "folly//folly/lang:assume",
        "folly//folly/lang:exception",
    ],
    exported_deps = [
        "folly//folly:portability",
    ],
    external_deps = [
        ("boost", None, "boost_preprocessor"),
    ],
)
